# -*- coding: utf-8 -*-

# Port implementation generated from reading ui file 'port.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import QThread, QMutex, pyqtSignal
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QIcon
import containerCheckArcore
import sys
import time



class Ui_Port(object):
    def setupUi(self, Port):
        Port.setObjectName("Port")
        # Port.resize(1078, 589)
        Port.setFixedSize(1078, 589) # 固定窗口大小
        Port.setWindowIcon(QIcon('logo.png'))

        self.pushButton_Alternate = QtWidgets.QPushButton(Port)
        self.pushButton_Alternate.setGeometry(QtCore.QRect(10, 290, 171, 61))
        self.pushButton_Alternate.setObjectName("pushButton_Alternate")

        self.pushButton_portAma1 = QtWidgets.QPushButton(Port)
        self.pushButton_portAma1.setGeometry(QtCore.QRect(10, 110, 171, 61))
        self.pushButton_portAma1.setObjectName("pushButton_portAma1")

        self.pushButton_port485 = QtWidgets.QPushButton(Port)
        self.pushButton_port485.setGeometry(QtCore.QRect(10, 20, 171, 61))
        self.pushButton_port485.setObjectName("pushButton_port485")

        self.pushButton_sensor = QtWidgets.QPushButton(Port)
        self.pushButton_sensor.setGeometry(QtCore.QRect(10, 200, 171, 61))
        self.pushButton_sensor.setObjectName("pushButton_sensor")

        self.pushButton_clear = QtWidgets.QPushButton(Port)
        self.pushButton_clear.setGeometry(QtCore.QRect(100, 560, 75, 23))
        self.pushButton_clear.setObjectName("pushButton_clear")

        self.pushButton_save = QtWidgets.QPushButton(Port)
        self.pushButton_save.setGeometry(QtCore.QRect(20, 560, 75, 23))
        self.pushButton_save.setObjectName("pushButton_save")

        self.textEdit = QtWidgets.QTextEdit(Port)
        self.textEdit.setGeometry(QtCore.QRect(190, 10, 871, 571))
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setReadOnly(True) # 只读

        self.retranslateUi(Port)
        QtCore.QMetaObject.connectSlotsByName(Port)

    def retranslateUi(self, Port):
        _translate = QtCore.QCoreApplication.translate
        Port.setWindowTitle(_translate("Port", "网关数据采集工具"))
        self.pushButton_Alternate.setText(_translate("Port", "交采检测"))
        self.pushButton_portAma1.setText(_translate("Port", "载波抄表检测"))
        self.pushButton_port485.setText(_translate("Port", "串口485检测"))
        self.pushButton_sensor.setText(_translate("Port", "传感器检测"))
        self.pushButton_clear.setText(_translate("Port", "清除窗口"))
        self.pushButton_save.setText(_translate("Port", "保存数据"))

        self.textEdit.setHtml(_translate("Port",
                                         "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                         "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                         "p, li { white-space: pre-wrap; }\n"
                                         "</style></head><body style=\" font-family:\'Calibri Light\'; font-size:14pt; font-weight:400; font-style:normal;\">\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Arial\'; font-size:22pt;\"></span></p></body></html>"))

class Ui_MainWindow(QDialog):
    def __init__(self):
        QDialog.__init__(self)
        self.UI = Ui_Port()
        self.UI.setupUi(self)
        # self.containerModule = containerCheckArcore.SSHConnection()

        self.UI.pushButton_port485.clicked.connect(lambda: self.port_485())
        self.UI.pushButton_Alternate.clicked.connect(lambda: self.port_alter())
        self.UI.pushButton_portAma1.clicked.connect(lambda: self.port_ama1())
        self.UI.pushButton_sensor.clicked.connect(lambda: self.port_sensor())
        self.UI.pushButton_clear.clicked.connect(lambda: self.text_clear())
        self.UI.pushButton_save.clicked.connect(lambda: self.Save_Text())
        # self.UI.pushButton_closed.clicked.connect(lambda: self.sshclosed())

        # 将输出重定向到textEdit中
        sys.stdout = EmittingStream(textWritten = self.output_written) #输出结果重定向
        sys.stderr = EmittingStream(textWritten = self.output_written) #错误结果重定向

    # 接收信号str的信号槽
    def output_written(self, text):
        cursor = self.UI.textEdit.textCursor()
        cursor.movePosition(QtGui.QTextCursor.End)
        cursor.insertText(text)
        self.UI.textEdit.setTextCursor(cursor)
        self.UI.textEdit.ensureCursorVisible()

    # def sshclosed(self):
    #     self.containerModule.close()

    def text_clear(self):
        self.UI.textEdit.clear()  # 清空窗口
        self.UI.retranslateUi(self)

    def port_485(self):
        try:
            # Ui_MainWindow.text_clear(self)
            self.set_pushButtonClose()
            self.thread_1 = Thread_485()  # 创建线程
            # self.set_pushButtonOpen()
            self.thread_1._signal.connect(self.set_pushButtonOpen)
            self.thread_1.start()  # 开始线程

        except Exception as e:
            print(e)

    def port_alter(self):
        try:
            # Ui_MainWindow.text_clear(self)
            self.set_pushButtonClose()
            self.thread_2 = Thread_alter()
            self.thread_2._signal.connect(self.set_pushButtonOpen)
            self.thread_2.start()

        except Exception as e:
            print(e)

    def port_ama1(self):
        try:
            # Ui_MainWindow.text_clear(self)
            self.set_pushButtonClose()
            self.thread_3 = Thread_ama1()
            self.thread_3._signal.connect(self.set_pushButtonOpen)
            self.thread_3.start()

        except Exception as e:
            print(e)

    def port_sensor(self):
        try:
            self.set_pushButtonClose()
            self.thread_4 = Thread_sensor()
            self.thread_4._signal.connect(self.set_pushButtonOpen)
            self.thread_4.start()

        except Exception as e:
            print(e)

    # 将数据保存到文件
    def Save_Text(self):
        try:
            StrText = self.UI.textEdit.toPlainText()
            TexT = str(StrText)
            path = './log/text.log' # 保存路径
            f = open(path, 'a') # a：只能写，文件不存在则创建，追加写
            f.write('{}'.format(TexT)) # format使任意数据转换成字符串
            f.close()
            msg_box = QMessageBox(QMessageBox.Information, '提示', '数据已保存至dist/log/text.log')
            msg_box.exec_()

        except Exception as e:
            print(e)

    def set_pushButtonClose(self):
        self.UI.pushButton_port485.setEnabled(False)
        self.UI.pushButton_Alternate.setEnabled(False)
        self.UI.pushButton_portAma1.setEnabled(False)
        self.UI.pushButton_sensor.setEnabled(False)
        self.UI.pushButton_clear.setEnabled(False)
        self.UI.pushButton_save.setEnabled(False)

    def set_pushButtonOpen(self):
        self.UI.pushButton_port485.setEnabled(True)
        self.UI.pushButton_Alternate.setEnabled(True)
        self.UI.pushButton_portAma1.setEnabled(True)
        self.UI.pushButton_sensor.setEnabled(True)
        self.UI.pushButton_clear.setEnabled(True)
        self.UI.pushButton_save.setEnabled(True)

# 写一个信号，用来发射标准输出作为信号
class EmittingStream(QtCore.QObject):
    textWritten = QtCore.pyqtSignal(str) # 定义一个发送str的信号

    def write(self, text):
        self.textWritten.emit(str(text))

containerModule = containerCheckArcore.CContainerCheck()
qmut_1 = QMutex() # 创建线程锁

# 创建多线程
class Thread_485(QThread):
    _signal = pyqtSignal()
    # global containerModule
    def __init__(self):
        super().__init__()
        # self.container = containerModule

    def run(self):
        # print(time.strftime('%Y.%m.%d %H:%M:%S', time.localtime(time.time())))
        qmut_1.lock()  # 加锁
        containerModule.port485()
        time.sleep(0.5)
        self._signal.emit()
        qmut_1.unlock()  # 解锁

class Thread_alter(QThread):
    _signal = pyqtSignal()

    def __init__(self):
        super().__init__()

    def run(self):
        containerModule.portAlter()
        time.sleep(0.5)
        self._signal.emit()

class Thread_ama1(QThread):
    _signal = pyqtSignal()

    def __init__(self):
        super().__init__()

    def run(self):
        containerModule.portAma1()
        time.sleep(0.5)
        self._signal.emit()

class Thread_sensor(QThread):
    _signal = pyqtSignal()

    def __init__(self):
        super().__init__()

    def run(self):
        containerModule.portsensor()
        time.sleep(0.5)
        self._signal.emit()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    mainWindow = Ui_MainWindow()
    mainWindow.show()
    sys.exit(app.exec_())